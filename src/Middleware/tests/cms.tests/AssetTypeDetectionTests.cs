using NUnit.Framework;
using ordercloud.integrations.cms;
using System;
using System.Collections.Generic;
using System.Text;

namespace CMS.Tests
{
	public class AssetTypeDetectionTests
	{
		[Test]
		[TestCase(null, AssetType.Unknown)]
		[TestCase("", AssetType.Unknown)]
		[TestCase("sdfsdfsdfsfdsf", AssetType.Unknown)]
		[TestCase("application/octet-stream", AssetType.Unknown)]
		[TestCase("text/plain", AssetType.Text)]
		[TestCase("application/pdf", AssetType.PDF)]
		[TestCase("text/csv", AssetType.SpreadSheet)]
		[TestCase("text/css", AssetType.Code)]
		[TestCase("text/javascript", AssetType.Code)]
		[TestCase("application/javascript", AssetType.Code)]
		[TestCase("text/markdown", AssetType.Markup)]
		[TestCase("text/html", AssetType.Markup)]
		[TestCase("application/xml", AssetType.Markup)]
		[TestCase("text/xml", AssetType.Markup)]
		[TestCase("text/json", AssetType.JSON)]
		[TestCase("image/png", AssetType.Image)]
		[TestCase("image/jpeg", AssetType.Image)]		
		[TestCase("image/bmp", AssetType.Image)]	
		[TestCase("application/zip", AssetType.Compressed)]
		[TestCase("application/gzip", AssetType.Compressed)]
		[TestCase("application/x-tar", AssetType.Compressed)]
		[TestCase("application/zlib", AssetType.Compressed)]
		[TestCase("application/zstd", AssetType.Compressed)]
		[TestCase("application/x-7z-compressed", AssetType.Compressed)]
		[TestCase("application/vnd.oasis.opendocument.presentation", AssetType.Presentation)]
		[TestCase("application/vnd.ms-powerpoint", AssetType.Presentation)]
		[TestCase("application/vnd.apple.keynote", AssetType.Presentation)]
		[TestCase("application/vnd.openxmlformats-officedocument.presentationml.presentation", AssetType.Presentation)]
		[TestCase("application/vnd.apple.numbers", AssetType.SpreadSheet)]
		[TestCase("application/vnd.sun.xml.calc", AssetType.SpreadSheet)]
		[TestCase("application/vnd.ms-excel", AssetType.SpreadSheet)]	
		[TestCase("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", AssetType.SpreadSheet)]
		[TestCase("application/x-troff-msvideo", AssetType.Video)]
		public void converts_from_content_types_correctly(string contentType, AssetType expectedType)
		{
			var type = AssetMapper.DetectAssetTypeFromContentType(contentType);
			Assert.AreEqual(expectedType, type);
		}

		[Test]
		[TestCase(null, AssetType.Unknown)]
		[TestCase("", AssetType.Unknown)]
		[TestCase("sdfdsf", AssetType.Unknown)]
		[TestCase("sdfsdf.sdf.sdf", AssetType.Unknown)]
		[TestCase("..sdfdsf.", AssetType.Unknown)]
		[TestCase("something.svg", AssetType.Image)]
		[TestCase("something.jpg", AssetType.Image)]
		[TestCase("something.jpeg", AssetType.Image)]
		[TestCase("something.png", AssetType.Image)]
		[TestCase("something.gif", AssetType.Image)]
		[TestCase("something.ico", AssetType.Image)]
		[TestCase("something.bpm", AssetType.Image)]
		[TestCase("something.tiff", AssetType.Image)]
		[TestCase("something.psd", AssetType.Image)]
		[TestCase("something.csv", AssetType.SpreadSheet)]
		[TestCase("something.xlsm", AssetType.SpreadSheet)]
		[TestCase("something.xls", AssetType.SpreadSheet)]
		[TestCase("something.xlsx", AssetType.SpreadSheet)]
		[TestCase("something.xl", AssetType.SpreadSheet)]
		[TestCase("something.ods", AssetType.SpreadSheet)]
		[TestCase("something.numbers", AssetType.SpreadSheet)]
		[TestCase("something.sxc", AssetType.SpreadSheet)]
		[TestCase("something.mp3", AssetType.Audio)]
		[TestCase("something.m4a", AssetType.Audio)]
		[TestCase("something.flac", AssetType.Audio)]
		[TestCase("something.wav", AssetType.Audio)]
		[TestCase("something.wma", AssetType.Audio)]
		[TestCase("something.aac", AssetType.Audio)]
		[TestCase("something.pcm", AssetType.Audio)]
		[TestCase("something.aiff", AssetType.Audio)]
		[TestCase("something.mp4", AssetType.Video)]
		[TestCase("something.mov", AssetType.Video)]
		[TestCase("something.wmv", AssetType.Video)]
		[TestCase("something.flv", AssetType.Video)]
		[TestCase("something.avi", AssetType.Video)]
		[TestCase("something.webm", AssetType.Video)]
		[TestCase("something.mkv", AssetType.Video)]
		[TestCase("something.json", AssetType.JSON)]
		[TestCase("something.pdf", AssetType.PDF)]
		[TestCase("something.key", AssetType.Presentation)]
		[TestCase("something.odp", AssetType.Presentation)]
		[TestCase("something.ppt", AssetType.Presentation)]
		[TestCase("something.pptx", AssetType.Presentation)]
		[TestCase("something.ppts", AssetType.Presentation)]
		[TestCase("something.zip", AssetType.Compressed)]
		[TestCase("something.tar", AssetType.Compressed)]
		[TestCase("something.tbz", AssetType.Compressed)]
		[TestCase("something.pkg", AssetType.Compressed)]
		[TestCase("something.tar.gz", AssetType.Compressed)]
		[TestCase("something.7z", AssetType.Compressed)]
		[TestCase("something.arj", AssetType.Compressed)]
		[TestCase("something.rar", AssetType.Compressed)]
		[TestCase("something.html", AssetType.Markup)]
		[TestCase("something.xml", AssetType.Markup)]
		[TestCase("something.md", AssetType.Markup)]
		[TestCase("something.yaml", AssetType.Markup)]
		[TestCase("something.yml", AssetType.Markup)]
		[TestCase("something.css", AssetType.Code)]
		[TestCase("something.js", AssetType.Code)]
		[TestCase("something.cs", AssetType.Code)]
		[TestCase("something.txt", AssetType.Text)]
		[TestCase("something.doc", AssetType.Text)]
		[TestCase("something.docx", AssetType.Text)]
		[TestCase("something.odt", AssetType.Text)]
		[TestCase("something.wpd", AssetType.Text)]
		[TestCase("something.rtf", AssetType.Text)]
		public void converts_from_file_name_correctly(string fileName, AssetType expectedType)
		{
			var type = AssetMapper.DetectAssetTypeFromFileName(fileName);
			Assert.AreEqual(expectedType, type);
		}
	}
}
